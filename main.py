import discord
from discord.ext import tasks, commands
import requests
from bs4 import BeautifulSoup
import asyncio
import os
import re
from datetime import datetime
from flask import Flask
from threading import Thread

# T·∫°o Flask app ƒë·ªÉ gi·ªØ repl live
app = Flask('')

@app.route('/')
def home():
    return "ü§ñ UTT News Bot is running!"

def run_flask():
    app.run(host='0.0.0.0', port=5000)

# Ch·∫°y Flask trong thread ri√™ng
Thread(target=run_flask).start()

# Ph·∫ßn c√≤n l·∫°i c·ªßa bot code...
intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix='!', intents=intents)
NEWS_URL = "https://daotao.utt.edu.vn/congthongtin/Index.aspx"
last_news = {}

def get_news():
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(NEWS_URL, headers=headers, timeout=10)
        response.encoding = 'utf-8'
        
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, 'html.parser')
            news_items = []
            
            # T√¨m c√°c th√¥ng b√°o tr√™n trang
            # Th·ª≠ t√¨m c√°c th·∫ª li ch·ª©a th√¥ng b√°o
            announcements = soup.find_all('li') + soup.find_all('tr') + soup.find_all('div', class_=re.compile('news|announcement|title'))
            
            for item in announcements[:5]:  # L·∫•y 5 tin ƒë·∫ßu ti√™n
                title_element = item.find('a') or item.find('span') or item
                if title_element and title_element.get_text(strip=True):
                    title = title_element.get_text(strip=True)
                    if len(title) > 20 and not any(skip in title.lower() for skip in ['menu', 'button', 'javascript']):
                        link = title_element.get('href', NEWS_URL)
                        if link and not link.startswith('http'):
                            link = 'https://daotao.utt.edu.vn' + link
                        
                        # T√¨m ng√†y th√°ng n·∫øu c√≥
                        date_text = item.get_text()
                        date_match = re.search(r'(\d{1,2}[\/\-]\d{1,2}[\/\-]\d{4})', date_text)
                        date = date_match.group(1) if date_match else datetime.now().strftime('%d/%m/%Y')
                        
                        news_items.append({
                            'title': f"üì¢ {title[:100]}..." if len(title) > 100 else f"üì¢ {title}",
                            'link': link,
                            'date': date,
                            'content': f"Ng√†y: {date}\nüîó [Xem chi ti·∫øt]({link})"
                        })
            
            if news_items:
                return news_items
            
        # Fallback n·∫øu kh√¥ng scrape ƒë∆∞·ª£c
        return [{
            'title': 'üì¢ Kh√¥ng th·ªÉ t·∫£i tin t·ª©c m·ªõi',
            'link': NEWS_URL,
            'date': datetime.now().strftime('%d/%m/%Y'),
            'content': f'Vui l√≤ng ki·ªÉm tra tr·ª±c ti·∫øp t·∫°i: {NEWS_URL}'
        }]
        
    except Exception as e:
        print(f"L·ªói khi l·∫•y tin t·ª©c: {e}")
        return [{
            'title': 'üì¢ L·ªói khi t·∫£i tin t·ª©c',
            'link': NEWS_URL,
            'date': datetime.now().strftime('%d/%m/%Y'),
            'content': f'C√≥ l·ªói x·∫£y ra. Vui l√≤ng ki·ªÉm tra: {NEWS_URL}'
        }]

@bot.event
async def on_ready():
    print(f'{bot.user} ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng!')
    check_news.start()

@bot.command(name='news')
async def get_latest_news(ctx):
    """L·∫•y tin t·ª©c m·ªõi nh·∫•t t·ª´ UTT"""
    try:
        news_items = get_news()
        if news_items:
            # G·ª≠i tin ƒë·∫ßu ti√™n (m·ªõi nh·∫•t)
            news = news_items[0]
            embed = discord.Embed(
                title=news['title'], 
                description=news['content'], 
                color=0x00ff00
            )
            embed.add_field(name="Ng√†y", value=news['date'], inline=True)
            embed.add_field(name="Link", value=f"[Xem th√™m]({news['link']})", inline=True)
            await ctx.send(embed=embed)
        else:
            await ctx.send("‚ùå Kh√¥ng th·ªÉ l·∫•y tin t·ª©c l√∫c n√†y.")
    except Exception as e:
        print(f"L·ªói khi g·ª≠i tin t·ª©c: {e}")
        await ctx.send("‚ùå C√≥ l·ªói x·∫£y ra khi l·∫•y tin t·ª©c.")

@tasks.loop(minutes=30)
async def check_news():
    try:
        channel = bot.get_channel(int(os.environ['DISCORD_CHANNEL_ID']))
        if channel:
            news_items = get_news()
            if news_items:
                # Ch·ªâ g·ª≠i tin ƒë·∫ßu ti√™n ƒë·ªÉ tr√°nh spam
                news = news_items[0]
                # Ki·ªÉm tra xem tin n√†y ƒë√£ g·ª≠i ch∆∞a (ƒë∆°n gi·∫£n)
                if news['title'] not in last_news:
                    embed = discord.Embed(
                        title=news['title'], 
                        description=news['content'], 
                        color=0x00ff00
                    )
                    embed.add_field(name="Ng√†y", value=news['date'], inline=True)
                    await channel.send(embed=embed)
                    last_news[news['title']] = True
    except Exception as e:
        print(f"L·ªói: {e}")

# Ch·∫°y bot
if __name__ == "__main__":
    bot.run(os.environ['DISCORD_BOT_TOKEN'])